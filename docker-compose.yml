
services:
  mongo1:
    image: mongo:8
    container_name: mongo1
    command:
      ["mongod", "--replSet", "rs0", "--bind_ip_all", "--oplogSize", "128"]
    ports: ["127.0.0.1:27017:27017"]
    volumes:
      - mongo1:/data/db
  mongo2:
    image: mongo:8
    container_name: mongo2
    command:
      ["mongod", "--replSet", "rs0", "--bind_ip_all", "--oplogSize", "128"]
    ports: ["127.0.0.2:27017:27017"]
    volumes:
      - mongo2:/data/db
  mongo3:
    image: mongo:8
    container_name: mongo3
    command:
      ["mongod", "--replSet", "rs0", "--bind_ip_all", "--oplogSize", "128"]
    ports: ["127.0.0.3:27017:27017"]
    volumes:
      - mongo3:/data/db

  mongoinit:
    image: mongo:8
    depends_on: [mongo1, mongo2, mongo3]
    volumes:
      - ./mongo-init/init.js:/docker-entrypoint-initdb.d/init.js:ro
    entrypoint:
      - bash
      - -lc
      - |
        until mongosh --host mongo1:27017 --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; do
          echo "Waiting for mongo1..."; sleep 2;
        done
        mongosh mongodb://mongo1:27017 --file /docker-entrypoint-initdb.d/init.js
  api:
    image: node:20
    working_dir: /app
    volumes:
      - ./backend:/app
    environment:
      - MONGODB_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      - NODE_ENV=development
    command: bash -lc "npm i && npm run dev"
    ports:
      - "3000:3000"
    depends_on:
      - mongoinit
volumes:
  mongo1: {}
  mongo2: {}
  mongo3: {}
